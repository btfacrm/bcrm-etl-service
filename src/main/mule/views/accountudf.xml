<?xml version="1.0" encoding="UTF-8"?>

<mule
 	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd	
		http://www.mulesoft.org/schema/mule/core 	http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/vm		http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	
	<flow name="queue-accountudf">
		<vm:listener doc:name="Listener" config-ref="VM_Config" queueName="accountudf" timeout="60" timeoutUnit="MINUTES"/>
		<flow-ref name="initialize-process" doc:name="initialize process"/>

		<!-- Get validFrom Watermark -->
		<flow-ref name="query-watermark-validfrom" doc:name="get watermark data"/>

		<!-- Get the expected the number of records to process for all batches, triggered only in first batch  -->
		<choice doc:name="custom watermark dates?" >
            <when expression='#[ isEmpty(vars.customWatermarkStart) ]'>
				<set-variable doc:name="query expected records" variableName="query" 
					  value='#["SELECT count(*) total from VCrm_AccountMaster_UDF WHERE ValidFrom >= :validFrom" ]' />
			</when>
			<otherwise>
				<set-variable doc:name="query expected records with custom watermark" variableName="query" 
					value="#['SELECT count(*) total from VCrm_AccountMaster_UDF WHERE ValidFrom between :start and :end' ]" />
			</otherwise>
		</choice>

		<flow-ref name="get-expected-records" doc:name="get expected records to process"/>

		<choice doc:name="query view?" >
            <when expression='#[ vars.expectedRecords > 0 ]'>

				<!-- Create query for view -->
				<flow-ref name="save-status-step4" doc:name="save batch status 4"/>
				<ee:transform doc:name="sql for view" >
					<ee:variables >
						<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
							output application/json skipNullOn="everywhere"
							---
							" SELECT " ++
							"   UPPER(RTRIM(CustomerAccountNumber_Key)) as CustomerAccountNumber_Key, " ++
							"   RTRIM(Managed_Agency_Code) as Managed_Agency_Code, " ++
							"   RTRIM(BirthCert_OnFile) as BirthCert_OnFile, " ++
							"   RTRIM(Long_Name_Line_5) as Long_Name_Line_5, " ++
							"   RTRIM(Pending_SocialServices_Assessment) as Pending_SocialServices_Assessment, " ++
							"   RTRIM(Non_Responsive_Guardian) as Non_Responsive_Guardian, " ++
							"   FORMAT(Age_Of_Majority, 'yyyy-MM-dd') AS Age_Of_Majority, " ++
							"   FORMAT(DistPlan_ExpireDate, 'yyyy-MM-dd') AS DistPlan_ExpireDate, " ++
							"   FORMAT(Temporary_CourtOrder_ExpireDate, 'yyyy-MM-dd') AS Temporary_CourtOrder_ExpireDate, " ++
							"   FORMAT(ValidFrom, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS ValidFrom " ++
							" FROM VCrm_AccountMaster_UDF  " ++
							" WHERE " ++ (
								if (isEmpty(vars.customWatermarkStart))
									" ValidFrom >= :validFrom "
								else 
									" ValidFrom between :start and :end "
							) ++
							"   AND  CustomerAccountNumber_Key not in ( " ++
							"           SELECT CustomerAccountNumber_Key  from VCrm_AccountMaster_UDF vamu " ++
							"           WHERE Age_Of_Majority > '2045' " ++
							"        ) " ++
							" ORDER BY ValidFrom, CustomerAccountNumber_Key " ++
							" OFFSET " ++ (vars.offset as String) ++ " ROWS " ++
							" FETCH NEXT " ++ (vars.maxRecords as String) ++ " ROWS ONLY"
							]]]>
						</ee:set-variable>
					</ee:variables>
				</ee:transform>

				<flow-ref name="mssql-main-query" doc:name="query main db"/>
			</when>
			<otherwise>
				<!-- There is no data to process, initializing varialbes for next steps-->
				<set-variable doc:name="set recordsProcessed" variableName="recordsProcessed" value="#[0]" />
				<set-variable doc:name="set httpStatus" variableName="httpStatus" value='#[200]'  />
			</otherwise>
		</choice>


		<choice doc:name="create API payload?" >
            <when expression='#[ vars.recordsProcessed > 0 ]'>

				<flow-ref name="save-status-step5" doc:name="save batch status 5"/>

				<ee:transform doc:name="api payload" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
							output application/json skipNullOn="everywhere"
							---
							payload map (item, value) ->{
								account: 				item.CustomerAccountNumber_Key as String,
								distributionExpiration: item.DistPlan_ExpireDate,
								temporaryCourtOrderExp: item.Temporary_CourtOrder_ExpireDate,
								birthCertificate: 		if (!isEmpty(item.BirthCert_OnFile))
															if (item.BirthCert_OnFile == "1")
																true
															else
																false
														else
															false,
								ageMajority: 			item.Age_Of_Majority,
								(line5: 			    trim(item.Long_Name_Line_5 replace "\"" with "'")) if (!isEmpty(item.Long_Name_Line_5)),
								pendingSocServ: 		if (!isEmpty(item.Pending_SocialServices_Assessment))
															if (item.Pending_SocialServices_Assessment == "1")
																true
															else
																false
														else
															false,
								managedAgencyCode: 		item.Managed_Agency_Code,
								managedAgencyName: 		item.Managed_Agency_Name,
								nonResponsiveGuardian: 	if (!isEmpty(item.Non_Responsive_Guardian))
															if (item.Non_Responsive_Guardian == "1")
																true
															else
																false
														else
															false,
								date: 					item.ValidFrom
							}
							]]>
						</ee:set-payload>
					</ee:message>
				</ee:transform>

				<!-- firstElementDate is needed if an error occurs, then watermark validFrom = firstElementDate -->
				<set-variable doc:name="set firstElementDate" variableName="firstElementDate" value='#[payload[0].date]'  />
				<set-variable doc:name="set lastRecordDate" variableName="lastRecordDate" value='#[payload[-1].date]'  />
				<flow-ref name="call-api" doc:name="call api"/>
            </when>
        </choice>

		<!-- Analyze results and post message to the response queue -->
		<flow-ref name="publish-message" doc:name="analyze and route message"/>

		<!-- Any error during execution will be notified in Anypoint Platform, then an alert will send an email to the administrators -->
		<error-handler >
			<on-error-continue doc:name="on error continue" enableNotifications="true" logException="true" >
				<flow-ref doc:name="create cloudhub notification" name="notify-error" />
			</on-error-continue>
		</error-handler>
	</flow>
</mule>