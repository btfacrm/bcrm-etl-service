<?xml version="1.0" encoding="UTF-8"?>

<mule
 	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd	
		http://www.mulesoft.org/schema/mule/core 	http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/vm		http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	
	<flow name="queue-account">
		<vm:listener doc:name="Listener" config-ref="VM_Config" queueName="account" timeout="60" timeoutUnit="MINUTES"/>
		<flow-ref name="initialize-process" doc:name="initialize process"/>

		<!-- Get validFrom Watermark -->
		<flow-ref name="query-watermark-validfrom" doc:name="get watermark data"/>

		<!-- Get the expected the number of records to process for all batches, triggered only in first batch  -->
		<choice doc:name="custom watermark dates?" >
            <when expression='#[ isEmpty(vars.customWatermarkStart) ]'>
				<set-variable doc:name="query expected records" variableName="query" 
					value='#["SELECT count(*) total from Vcrm_AccountMaster WHERE ValidFrom >= :validFrom" ]' />
			</when>
			<otherwise>
				<set-variable doc:name="query expected records with custom watermark" variableName="query" 
					value="#['SELECT count(*) total from Vcrm_AccountMaster WHERE ValidFrom between :start and :end' ]" />
			</otherwise>
		</choice>

		<flow-ref name="get-expected-records" doc:name="get expected records to process"/>

		<choice doc:name="query view?" >
            <when expression='#[ vars.expectedRecords > 0 ]'>

				<!-- Create query for view -->
				<flow-ref name="save-status-step4" doc:name="save batch status 4"/>
				<ee:transform doc:name="sql for view" >
					<ee:variables >
						<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
							output application/json skipNullOn="everywhere"
							---
							" SELECT " ++
							"   UPPER(RTRIM(CustomerAccountNumber)) as CustomerAccountNumber, " ++
							"   OwnerContactID, CustomerShortName, " ++
							"   AccountTierLevelNum, AccountTierLevelDesc, " ++
							"   RTRIM(FreezeCode) as FreezeCode, " ++
							"   RTRIM(FreezeDesc) as FreezeDesc, " ++
							"   AccountTypeCode, AccountTypeDescription, " ++
							"   AccountCategoryCode, AccountCategoryDescription, " ++
							"   AdminOfficerContactID, AdministratorName, " ++
							"   ActiveFlag, ClosedFlag, " ++
							"   RTRIM(CustomerDescriptionLine1) as CustomerDescriptionLine1, " ++
							"   RTRIM(CustomerDescriptionLine2) as CustomerDescriptionLine2, " ++
							"   RTRIM(CustomerDescriptionLine3) as CustomerDescriptionLine3, " ++
							"   RTRIM(CustomerDescriptionLine4) as CustomerDescriptionLine4, " ++
							"   StatementVsValidFrom_difference, " ++
							"   FORMAT(DateOpened, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS DateOpened, " ++
							"   FORMAT(ClosedDate, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS ClosedDate, " ++
							"   FORMAT(StatementDateTime, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS StatementDateTime, " ++
							"   FORMAT(ValidFrom, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS ValidFrom " ++
							" FROM Vcrm_AccountMaster " ++
							" WHERE " ++ (
								if (isEmpty(vars.customWatermarkStart))
									" ValidFrom >= :validFrom "
								else 
									" ValidFrom between :start and :end "
							) ++
							" ORDER BY ValidFrom, CustomerAccountNumber " ++
							" OFFSET " ++ (vars.offset as String) ++ " ROWS " ++
							" FETCH NEXT " ++ (vars.maxRecords as String) ++ " ROWS ONLY"
						]]]>
						</ee:set-variable>
					</ee:variables>
				</ee:transform>

				<flow-ref name="mssql-main-query" doc:name="query main db"/>
			</when>
			<otherwise>
				<!-- There is no data to process, initializing varialbes for next steps-->
				<set-variable doc:name="set recordsProcessed" variableName="recordsProcessed" value="#[0]" />
				<set-variable doc:name="set httpStatus" variableName="httpStatus" value='#[200]'  />
			</otherwise>
		</choice>


		<choice doc:name="create API payload?" >
            <when expression='#[ vars.recordsProcessed > 0 ]'>

				<flow-ref name="save-status-step5" doc:name="save batch status 5"/>

				<ee:transform doc:name="api payload" >
					<ee:message >
					<!-- CustomerShortName:    item.CustomerShortName, -->
						<ee:set-payload ><![CDATA[%dw 2.0
							output application/json
							---
							payload map (item, value) ->{
								account: 			  item.CustomerAccountNumber,
								contactId: 			  item.OwnerContactID as String,
								
								(tierLevelCode: 	  item.AccountTierLevelNum as String) if (!isEmpty(item.AccountTierLevelNum)),
								(tierLevelDescription: trim(item.AccountTierLevelDesc replace "\"" with "'")) if (!isEmpty(item.AccountTierLevelDesc)),
								(freezeCode: 		  trim(item.FreezeCode)) if (!isEmpty(item.FreezeCode)),
								(freezeDescription:   trim(item.FreezeDesc replace "\"" with "'")) if (!isEmpty(item.FreezeDesc)),
								typeCode: 			  trim(item.AccountTypeCode),
								typeDescription: 	  trim(item.AccountTypeDescription replace "\"" with "'"),
								categoryCode: 		  trim(item.AccountCategoryCode),
								categoryDescription:  trim(item.AccountCategoryDescription replace "\"" with "'"),
								adminOfficerId: 	  trim(item.AdminOfficerContactID) as String,
								adminOfficerName: 	  trim(item.AdministratorName replace "\"" with "'"),
								activeFlag: 		  if (item.ActiveFlag != 0) true else false,
								openedDate: 		  item.DateOpened,
								(closedDate: 		  item.ClosedDate) if (!isEmpty(item.ClosedDate)),
								closedFlag: 		  if (item.ClosedFlag != 0) true else false,
								(line1: 			  trim(item.CustomerDescriptionLine1 replace "\"" with "'")) if (!isEmpty(item.CustomerDescriptionLine1)),
								(line2: 			  trim(item.CustomerDescriptionLine2 replace "\"" with "'")) if (!isEmpty(item.CustomerDescriptionLine2)),
								(line3: 			  trim(item.CustomerDescriptionLine3 replace "\"" with "'")) if (!isEmpty(item.CustomerDescriptionLine3)),
								(line4: 			  trim(item.CustomerDescriptionLine4 replace "\"" with "'")) if (!isEmpty(item.CustomerDescriptionLine4)),
								(statementDate: 	  item.StatementDateTime) if (!isEmpty(item.StatementDateTime)),
								date: 				  item.ValidFrom
							}
							]]>
						</ee:set-payload>
					</ee:message>
				</ee:transform>

				<!-- firstElementDate is needed if an error occurs, then watermark validFrom = firstElementDate -->
				<set-variable doc:name="set firstElementDate" variableName="firstElementDate" value='#[payload[0].date-1]'  />
				<set-variable doc:name="set lastRecordDate" variableName="lastRecordDate" value='#[payload[-1].date]'  />
				<flow-ref name="call-api" doc:name="call api"/>
            </when>
        </choice>

		<!-- Analyze results and post message to the response queue -->
		<flow-ref name="publish-message" doc:name="analyze and route message"/>

		<!-- Any error during execution will be notified in Anypoint Platform, then an alert will send an email to the administrators -->
		<error-handler >
			<on-error-continue doc:name="on error continue" enableNotifications="true" logException="true" >
				<flow-ref doc:name="create cloudhub notification" name="notify-database-error" />
			</on-error-continue>
		</error-handler>
	</flow>
</mule>
