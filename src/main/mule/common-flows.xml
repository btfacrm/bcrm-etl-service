<mule
    xmlns:os="http://www.mulesoft.org/schema/mule/os"
    xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
    xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
		http://www.mulesoft.org/schema/mule/core 
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http
        http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
		http://www.mulesoft.org/schema/mule/db 
		http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
        http://www.mulesoft.org/schema/mule/vm 
		http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
		http://www.mulesoft.org/schema/mule/os 
		http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	

    <!-- ********************************************* --> 
	<!-- Business flows                                -->
	<!-- ********************************************* --> 

    <sub-flow name="get-expected-records">
		<choice doc:name="get expected records?" >
            <when expression='#[ vars.batchNumber == 1 ]'>
				<flow-ref name="save-status-step3" doc:name="save batch status 3"/>
				<flow-ref name="mssql-main-query" doc:name="query main db"/>
				<set-variable doc:name="query expected records" variableName="expectedRecords" value="#[payload[0].total]"/>
				<logger doc:name="expected records" level="INFO" category="app" message="#['Expected records to process: ' ++ vars.expectedRecords as String]"/>
			</when>
		</choice>
    </sub-flow>

    <sub-flow name="query-watermark-validfrom">

		<set-variable doc:name="connection db" variableName="connectionDb" value="Database_Config_Watermark" />

		<ee:transform doc:name="query watermark" >
			<ee:variables >
				<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
					output application/json
					---
                    " SELECT ViewName, Retries, FORMAT(LastExecution, 'yyyy-MM-dd HH:mm:ss.fff') AS LastExecution " ++
                    " FROM BCMS_WaterMark " ++ 
                    " WHERE ViewName = '" ++ vars.view ++ "'"
				]]]>
				</ee:set-variable>
			</ee:variables>
		</ee:transform>

        <flow-ref name="mssql-watermark-query"/>

		<set-variable doc:name="set validFrom" variableName="validFrom" value="#[payload[0].LastExecution as String]" />
		<logger level="INFO" category="app" message="#['Watermark validFrom: ' ++ vars.validFrom]" />
    </sub-flow>

	<sub-flow name="update-watermark-results">
        <logger level="INFO" category="app" message="#['Analisys for watermark update, httpstatus: ' ++ vars.httpStatus]" />
        <choice doc:name="verify http call" >
            <when expression='#[ vars.httpStatus != 200 ]'>
				<!-- There was an error in Salesforce API -->
                <logger level="INFO" category="app" message="#['There was an error in the Salesforce API']" />
				<set-variable doc:name="httpStatus" variableName="httpStatus" value="#[500]"/>
				<set-variable doc:name="set lastErrorResponse" variableName="lastErrorResponse" value='#[write(vars.httpMessage, "application/json")]'  />
				<ee:transform doc:name="query update watermark" >
					<ee:variables >
						<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
							output application/json
							---
							" UPDATE BCMS_WaterMark SET " ++ 
							"   ApiResponse = :apiResponse, " ++
							"   lastErrorDate = :lastExecution, " ++
							"   LastErrorResponse = :lastErrorResponse, " ++
							"   Retries = Retries + 1 " ++
							" WHERE ViewName = '" ++ vars.view ++ "'"
						]]]>
						</ee:set-variable>
					</ee:variables>
				</ee:transform>
            </when>
			<otherwise>
				<!-- A successfull call to Salesforce API -->
				<logger level="INFO" category="app" message="#['Success call to Salesforce API']" />
				<ee:transform doc:name="query update watermark" >
					<ee:variables >
						<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
							output application/json
							---
							" UPDATE BCMS_WaterMark SET " ++ 
							"   ApiResponse = :apiResponse, " ++
							"   LastExecution = :lastExecution, " ++
							"   Retries = 0 " ++
							" WHERE ViewName = '" ++ vars.view ++ "'"
						]]]>
						</ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
        </choice>     

        <flow-ref name="mssql-watermark-update"/>
	</sub-flow>

    <sub-flow name="publish-message">
		<flow-ref name="save-status-step6" doc:name="save batch status 6"/>

        <choice doc:name="determine how to route the flow" >
            <when expression='#[vars.recordsProcessed == vars.maxRecords and (vars.httpStatus as Number) == 200 and isEmpty(vars.customWatermarkStart)]'>
				<logger doc:name="payload" level="INFO" category="app" message="#['Trigger a new batch process to find more records']"/>
				<vm:publish queueName="#[vars.view]" doc:name="Publish" config-ref="VM_Config" sendCorrelationId="ALWAYS">
					<vm:content ><![CDATA[#[%dw 2.0
						output application/json
						---
						{
							view: vars.view,
							correlationId: correlationId,
							expectedRecords: vars.expectedRecords,
							startDate: vars.startDate,
							batchNumber: vars.batchNumber,
							offset: vars.offset + vars.maxRecords,
							totalRecords: vars.totalRecords + vars.maxRecords,
							apiResponseHistory: vars.apiResponseHistory +
								{	
									batchNumber : vars.batchNumber,
									offset: vars.offset, 
                                    apiStatus : vars.httpStatus,
									apiResponse : vars.httpMessage
								},
							lastApiInputPayload:{}
						}]]]></vm:content>
				</vm:publish>				
            </when>
            <otherwise>
                <logger doc:name="payload" level="INFO" category="app" message="#['Finish processing, add current batch']"/>
				<ee:transform doc:name="build the service response message">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="batchResponse" ><![CDATA[%dw 2.0
							output application/json
            
                            import * from dw::core::Periods
                            import leftPad from dw::core::Strings
                            
                            var processingTime = now() - vars.startDate
                            var milliseconds = processingTime as Number {unit: 'milliseconds'} mod 1000
                            ---
                            {
                                status: vars.httpStatus,
                                message: if (vars.httpStatus == 200)
                                            "The process was executed successfully"
                                        else
                                            "There was an error, review the api response and server logs",
                                "startDate": (vars.startDate as DateTime) as String {format:"yyyy-MM-dd HH:mm:ss"},
                                "endDate": now() as String {format:"yyyy-MM-dd HH:mm:ss"},
                                "processingTime": leftPad(processingTime.hours as String, 2, "0") ++ ":" ++ 
                                                    leftPad(processingTime.minutes as String, 2, "0") ++ ":" ++
                                                    leftPad((processingTime.seconds mod 60 as Number) as String, 2, "0") ++ ":" ++
                                                    leftPad(milliseconds as String, 3, "0"),
                                "correlationId": correlationId,
								"customWatermarkStart": vars.customWatermarkStart,
								"customWatermarkEnd": vars.customWatermarkEnd,
								"customMaxRecords": vars.customMaxRecords,						
                                "updateWatermarkDate": if (vars.httpStatus == 200)
                                                            vars.lastExecution
                                                    else
                                                            "On error the value is not updated",
								"expectedRecords": vars.expectedRecords
                            } ++
                            if (vars.recordsProcessed > 0 )
                                {
                                    "totalRecords": vars.totalRecords + vars.recordsProcessed,
                                    "batchSize": vars.batchNumber,
                                    "apiResponseHistory": vars.apiResponseHistory +
                                        {	
                                            "batchNumber" : vars.batchNumber,
                                            "offset": vars.offset,
                                            "apiStatus" : vars.httpStatus,
                                            "apiResponse" : vars.httpMessage
                                        },
                                    "lastApiInputPayload": vars.apiInputPayload
                                }
                            else
                                {
                                    "totalRecords": vars.totalRecords,
                                    "batchSize": vars.batchNumber - 1,
                                    "apiResponseHistory": vars.apiResponseHistory,
                                    "lastApiInputPayload": {}
                                } 
						]]></ee:set-variable>
					</ee:variables>
				</ee:transform>

				<flow-ref name="update-watermark-results"/>

				<os:remove doc:name="Remove" key="#[vars.view]" objectStore="Object_store"/>
            </otherwise>
        </choice>
	</sub-flow>

    <sub-flow name="initialize-process">
		<set-variable doc:name="get view to process" variableName="view" value="#[payload.view]" />

        <!-- Extract batch metadata -->
		<logger doc:name="payload" level="INFO" category="app" message="#[payload]"/>
		<set-variable doc:name="save queueMesssage" variableName="queueMessage" value='#[payload]' />
		<set-variable doc:name="set offset" variableName="offset" value='#[payload.offset as Number]' />
		<set-variable doc:name="set batchNumber" variableName="batchNumber" value='#[payload.batchNumber as Number + 1]' />
		<set-variable doc:name="set totalRecords" variableName="totalRecords" value='#[payload.totalRecords as Number]' />
		<set-variable doc:name="set apiResponseHistory" variableName="apiResponseHistory" value='#[payload.apiResponseHistory]' />
		<set-variable doc:name="set startDate" variableName="startDate" value='#[payload.startDate as DateTime]' />
		<set-variable doc:name="set expectedRecords" variableName="expectedRecords" value="#[payload.expectedRecords]" />
		<set-variable doc:name="set customWatermarkStart" variableName="customWatermarkStart" value="#[payload.customWatermarkStart]" />
		<set-variable doc:name="set customWatermarkEnd" variableName="customWatermarkEnd" value="#[payload.customWatermarkEnd]" />
		<set-variable doc:name="set customMaxRecords" variableName="customMaxRecords" value="#[payload.customMaxRecords]" />

		<choice doc:name="query view?" >
            <when expression='#[ isEmpty(vars.customMaxRecords)]'>
				<set-variable doc:name="set maxRecords" variableName="maxRecords" value="#[${maxrecords}]" />
			</when>
			<otherwise>
				<set-variable doc:name="set maxRecords" variableName="maxRecords" value="#[vars.customMaxRecords as Number]" />
			</otherwise>
		</choice>
		<logger level="INFO" category="app" 
			message="#[output application/java --- 'Executing queue process for view: ' ++ vars.view ++ ', max records x batch: ' ++ vars.maxRecords]" />

		<choice doc:name="create API payload?" >
            <when expression='#[ vars.view == "contact" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.contact}" />
			</when>
            <when expression='#[ vars.view == "account" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.account}" />
			</when>
            <when expression='#[ vars.view == "accountudf" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.accountudf}" />
			</when>
            <when expression='#[ vars.view == "balance" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.balance}" />
			</when>
			<when expression='#[ vars.view == "disbursement" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.disbursement}" />
			</when>
            <when expression='#[ vars.view == "agencyregion" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.agencyregion}" />
			</when>			
			<when expression='#[ vars.view == "phone" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.phone}" />
			</when>
            <when expression='#[ vars.view == "address" ]'>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="${service.path.address}" />
			</when>	
			<otherwise>
				<set-variable doc:name="set view API endpoint" variableName="servicePath" value="this-path-is-not-correct" />
			</otherwise>
		</choice>

        <!-- The expected result from the salesforce API-->
        <set-variable doc:name="set statusValidator" variableName="statusValidator" value="200" />
		<flow-ref name="save-status-step2" doc:name="save batch status 2"/>

    </sub-flow>
</mule>