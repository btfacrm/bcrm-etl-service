<?xml version="1.0" encoding="UTF-8"?>

<mule
 	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" 
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd	
		http://www.mulesoft.org/schema/mule/core 
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/http 
		http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/vm 
		http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	
	<flow name="queue-contact">
		<vm:listener doc:name="Listener" config-ref="VM_Config" queueName="contact" timeout="60" timeoutUnit="MINUTES"/>
		<flow-ref name="initialize-process" doc:name="initialize process"/>

		<!-- Get validFrom Watermark -->
		<flow-ref name="query-watermark-validfrom" doc:name="get watermark data"/>

		<!-- Get the expected the number of records to process for all batches, triggered only in first batch  -->
		<choice doc:name="custom watermark dates?" >
            <when expression='#[ isEmpty(vars.customWatermarkStart) ]'>
				<set-variable doc:name="query expected records" variableName="query" 
					value='#["SELECT count(DISTINCT ContactID) total from VCrm_ContactMaster WHERE ValidFrom >= :validFrom" ]' />
			</when>
			<otherwise>
				<set-variable doc:name="query expected records with custom watermark" variableName="query" 
					value="#['SELECT count(DISTINCT ContactID) total from VCrm_ContactMaster WHERE ValidFrom between :start and :end' ]" />
			</otherwise>
		</choice>

		<flow-ref name="get-expected-records" doc:name="get expected records to process"/>

		<choice doc:name="query view?" >
            <when expression='#[ vars.expectedRecords > 0 ]'>
			
				<!-- Create query for view -->
				<flow-ref name="save-status-step4" doc:name="save batch status 4"/>
				<ee:transform doc:name="sql for view" >
					<ee:variables >
						<ee:set-variable variableName="query"><![CDATA[#[ %dw 2.0
							output application/json skipNullOn="everywhere"
							---
							" SELECT DISTINCT ContactID," ++
							"   SSNFlag, ActiveFlag, DisbursementEligibilityFlag, " ++
							"   RTRIM(PrimaryLastName) as PrimaryLastName, " ++
							"   RTRIM(PrimaryMiddleInitial) as PrimaryMiddleInitial, " ++
							"   RTRIM(PrimaryFirstName) as PrimaryFirstName, " ++
							"   RTRIM(ContactName) as ContactName, " ++				
							"   RTRIM(SSN) as SSN, " ++
							"   RTRIM(PrimaryGender) as PrimaryGender, " ++
							"   FORMAT(DateOfBirth, 'yyyy-MM-dd') AS DateOfBirth, " ++
							"   FORMAT(DateOfDeath, 'yyyy-MM-dd') AS DateOfDeath, " ++
							"   FORMAT(ValidFrom, 'yyyy-MM-ddTHH:mm:ss.fffZ') AS ValidFrom " ++
							" FROM VCrm_ContactMaster  " ++
							" WHERE " ++ (
								if (isEmpty(vars.customWatermarkStart))
									" ValidFrom >= :validFrom "
								else
									" ValidFrom between :start and :end "
							) ++
							" ORDER BY ValidFrom, ContactID " ++
							" OFFSET " ++ (vars.offset as String) ++ " ROWS " ++
							" FETCH NEXT " ++ (vars.maxRecords as String) ++ " ROWS ONLY"
						]]]>
						</ee:set-variable>
					</ee:variables>
				</ee:transform>

				<flow-ref name="mssql-main-query" doc:name="query main db"/>
			</when>
			<otherwise>
				<!-- There is no data to process, initializing varialbes for next steps-->
				<set-variable doc:name="initialized processed records" variableName="recordsProcessed" value="#[0]"/>
				<set-variable doc:name="set httpStatus" variableName="httpStatus" value='#[200]'  />
			</otherwise>
		</choice>


		<choice doc:name="create API payload?" >
            <when expression='#[ vars.recordsProcessed > 0 ]'>

				<flow-ref name="save-status-step5" doc:name="save batch status 5"/>

				<ee:transform doc:name="api payload" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
							output application/json
							---
							payload map (item, value) ->{
								contactId: 		 item.ContactID as String,
								(firstName: 	 item.PrimaryFirstName replace "\"" with "'") if (!isEmpty(item.PrimaryFirstName)),
								(lastName: 		 item.PrimaryLastName replace "\"" with "'") if (!isEmpty(item.PrimaryLastName)),
								(middleInitial:  item.PrimaryMiddleInitial replace "\"" with "'") if (!isEmpty(item.PrimaryMiddleInitial)),
								name: 			 item.ContactName replace "\"" with "'",
								(gender: 		 item.PrimaryGender) if (!isEmpty(item.PrimaryGender)),
								(ssn: 			 item.SSN) if (!isEmpty(item.SSN)),
								ssnFlag: 		 !isEmpty(item.SSNFlag) and item.SSNFlag != 0,
								(dob: 			 item.DateOfBirth) if (!isEmpty(item.DateOfBirth)),
								(dod: 			 item.DateOfDeath) if (!isEmpty(item.DateOfDeath)),
								activeFlag: 	 !isEmpty(item.ActiveFlag) and item.ActiveFlag != 0,
								disbursementFlag:!isEmpty(item.DisbursementEligibilityFlag) and item.DisbursementEligibilityFlag != 0,
								date: 			 item.ValidFrom
							}
							]]>
						</ee:set-payload>
					</ee:message>
				</ee:transform>

				<!-- firstElementDate is needed if an error occurs, then watermark validFrom = firstElementDate -->
				<set-variable doc:name="set firstElementDate" variableName="firstElementDate" value='#[payload[0].date]'  />
				<flow-ref name="call-api" doc:name="call api"/>
            </when>
        </choice>

		<!-- Analyze results and post message to the response queue -->
		<flow-ref name="publish-message" doc:name="analyze and route message"/>

        <error-handler ref="global-error-handler" />
	</flow>
</mule>
